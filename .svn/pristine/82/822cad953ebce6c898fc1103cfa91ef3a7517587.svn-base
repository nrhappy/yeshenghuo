package cn.xjwlfw.yeshenghuo.service.business.impl;

import java.math.BigDecimal;

import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;

import com.octo.captcha.service.image.ImageCaptchaService;

import cn.xjwlfw.yeshenghuo.mapper.AddressMapper;
import cn.xjwlfw.yeshenghuo.mapper.AgencyBusinessMapper;
import cn.xjwlfw.yeshenghuo.mapper.AgencyMapper;
import cn.xjwlfw.yeshenghuo.mapper.BusinessMapper;
import cn.xjwlfw.yeshenghuo.mapper.RoleMapper;
import cn.xjwlfw.yeshenghuo.mapper.UserBusinessMapper;
import cn.xjwlfw.yeshenghuo.mapper.UserMapper;
import cn.xjwlfw.yeshenghuo.mapper.UserRoleMapper;
import cn.xjwlfw.yeshenghuo.model.Address;
import cn.xjwlfw.yeshenghuo.model.Agency;
import cn.xjwlfw.yeshenghuo.model.AgencyBusiness;
import cn.xjwlfw.yeshenghuo.model.Business;
import cn.xjwlfw.yeshenghuo.model.Role;
import cn.xjwlfw.yeshenghuo.model.User;
import cn.xjwlfw.yeshenghuo.model.UserBusiness;
import cn.xjwlfw.yeshenghuo.model.UserRole;
import cn.xjwlfw.yeshenghuo.service.business.BusinessLoginService;
import cn.xjwlfw.yeshenghuo.system.base.impl.BaseServiceImpl;

@Service
public class BusinessLoginServiceImpl extends BaseServiceImpl implements BusinessLoginService {
	
	private Logger logger = LoggerFactory.getLogger(getClass());

	@Autowired
	private UserMapper userDao;
	
	@Autowired
	private BusinessMapper businessDao;
	
	@Autowired
	
	private UserBusinessMapper userBusinessDao;
	
	@Autowired
	private AddressMapper addressDao;
	
	@Autowired
	private AgencyMapper agencyDao;
	
	@Autowired
	private AgencyBusinessMapper agencyBusinessDao;
	
	@Autowired
	private ImageCaptchaService imageCaptchaService;
	
	@Autowired
	private UserRoleMapper userRoleMapper;
	
	@Autowired
	private RoleMapper roleMapper;
	
	@Override
	public String doLogin(String mobile, String password, Model model) {
		UsernamePasswordToken token = new UsernamePasswordToken(mobile, password);
		Subject subject = SecurityUtils.getSubject();
		
		try {
			subject.login(token);
			
			if (subject.isAuthenticated()) {				
				return "redirect:/business/manage";
			} else {
				return "/business/login";
			}
		} catch (IncorrectCredentialsException e) {
			model.addAttribute("message", "用户名或密码错误，请重新输入！");
		} catch (AuthenticationException e) {
			model.addAttribute("message", "用户名或密码错误，请重新输入！");
		}
		return "/business/login";
	}

	@Override
	public String doRegister(String mobile, String password, String repassword, String imageCaptcha, Model model, HttpServletRequest request) {
		if (mobile.length() < 1) {
			model.addAttribute("message", "手机号不能为空！");
		} else if (userDao.selectByMobile(mobile) != null) {
			model.addAttribute("message", "手机号已经注册!");
		} else if (imageCaptcha.length() < 1) {
			model.addAttribute("message", "图片验证码不能为空！");
		} else if (!imageCaptchaService.validateResponseForID(request.getSession().getId(), imageCaptcha)) {
			model.addAttribute("message", "请输入有效的图片验证码！");
			logger.info("图片验证码输入错误！");
		} else if (password.length() < 1) {
			model.addAttribute("message", "密码不能为空！");
		} else if (mobile.length() != 11) {
			model.addAttribute("message", "请输入11位手机号！");
		} else if (password.length() < 6 && password.length() > 20) {
			model.addAttribute("message", "请输入6-20位密码！");
		} else if (!password.equals(password)) {
			model.addAttribute("message", "两次输入的密码不一致！");
		} else {
			User user = new User();
			user.setMobile(mobile);
			user.setPassword(password);
			if (userDao.insertSelective(user) == 1) {
				Role businessRole = roleMapper.selectByName("business");
				UserRole userRole = new UserRole(user.getId(), businessRole.getId());
				if (userRoleMapper.insertSelective(userRole) == 1) {
					SecurityUtils.getSubject().login(new UsernamePasswordToken(user.getMobile(), user.getPassword()));
					return "redirect:/business/complete";
				}
			} else {
				model.addAttribute("message", "注册失败！");
			}
		}
		return "/business/register";
	}

	@Override
	public String doComplete(String name, String tel, String bank, String bankAccount, String bankPossessor, String RefMobile, String provinceCode, String cityCode, String districtCode, Model model) {
		if (name.length() < 1) {
			model.addAttribute("message", "酒吧名称不能为空！");
		} else if (businessDao.selectByName(name) != null) {
			model.addAttribute("message", "酒吧名称已经存在！");
		} else if (name.length() < 4 && name.length() > 20) {
			model.addAttribute("message", "请输入4-20位酒吧名称！");
		} else {
			Address province = addressDao.selectByCode(Integer.valueOf(provinceCode));
			Address city = addressDao.selectByCode(Integer.valueOf(cityCode));
			Address district = addressDao.selectByCode(Integer.valueOf(districtCode));
			
			String address = province.getName() + city.getName() + district.getName();
			
			Business business = new Business();
			business.setName(name);
			business.setAddrress(address);
			business.setLogo("/resource/img/bardefatulLogo.png");
			business.setTel(tel);
			business.setRatio(new BigDecimal("50"));
			business.setBank(bank);
			business.setBankAccount(bankAccount);
			business.setBankPossessor(bankPossessor);
			if (businessDao.insertSelective(business) == 1) {
				User currentUser = userDao.selectByMobile((String) SecurityUtils.getSubject().getPrincipal());
				UserBusiness userBusiness = new UserBusiness();
				userBusiness.setUserId(currentUser.getId());
				userBusiness.setBusinessId(business.getId());
				if (userBusinessDao.insertSelective(userBusiness) == 1) {
					if (RefMobile.length() > 1) {
						Agency agency = agencyDao.selectByMobile(RefMobile);
						if (agency != null) {
							AgencyBusiness agencyBusiness = new AgencyBusiness();
							agencyBusiness.setAgencyId(agency.getId());
							agencyBusiness.setBusinessId(business.getId());
							agencyBusinessDao.insertSelective(agencyBusiness);
						}
					}
					return "redirect:/business/manage";
				} else {
					model.addAttribute("message", "完善失败！");
				}
			} else {
				model.addAttribute("message", "完善失败！");
			}
		}
		return "/business/complete";
	}

	@Override
	public String doForget(HttpServletRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String doReset(HttpServletRequest request) {
		// TODO Auto-generated method stub
		return null;
	}

}
